{"version":3,"sources":["assets/Idle.fbx","components/character.texture.js","assets/character_textures/Custom_3.png","assets/character_textures/T_F_MED_ASN_Starfish_Head_01_Hair_D.png","assets/character_textures/T_F_MED_ASN_Starfish_Head_01_Head_D.png","components/IdleCharacter.jsx","assets/planet_animated.fbx","components/world.texture.js","assets/world_textures/bushes_autumn_basecolor.jpg","assets/world_textures/bushes_spring_basecolor.jpg","assets/world_textures/bushes_summer_basecolor.jpg","assets/world_textures/bushes_winter_basecolor.jpg","assets/world_textures/cones_autumn_basecolor.jpg","assets/world_textures/cones_spring_basecolor.jpg","assets/world_textures/cones_winter_basecolor.jpg","assets/world_textures/cubes_basecolor.jpg","assets/world_textures/meteor_basecolor.jpg","assets/world_textures/palms_basecolor.jpg","assets/world_textures/planet_basecolor.jpg","assets/world_textures/platonics_autumn_basecolor.jpg","assets/world_textures/platonics_summer_basecolor.jpg","assets/world_textures/rocks_winter1_basecolor.jpg","assets/world_textures/rocks_winter2_basecolor.jpg","assets/world_textures/rocks_winter3_basecolor.jpg","assets/world_textures/rocks1_basecolor.jpg","assets/world_textures/rocks2_basecolor.jpg","assets/world_textures/rocks3_basecolor.jpg","assets/world_textures/sticks_basecolor.jpg","assets/world_textures/water_basecolor.jpg","components/World.jsx","App.js","reportWebVitals.js","index.js"],"names":["textures","name","texture","IdleCharacter","ref","useRef","useEffect","character","mixer","width","height","current","manager","THREE","clock","scene","clientWidth","camera","position","set","rotation","renderer","shadowMap","enabled","background","setSize","appendChild","domElement","fog","hemiLight","multiplyScalar","color","setHSL","groundColor","add","dirLight","d","castShadow","shadow","top","bottom","left","right","far","bias","groundGeo","groundMat","ground","x","Math","PI","receiveShadow","loader","FBXLoader","textureLoader","load","model","object","clipAction","animations","play","traverse","child","isMesh","forEach","item","index","material","map","needsUpdate","onLoad","animate","controls","OrbitControls","minDistance","maxDistance","update","requestAnimationFrame","delta","getDelta","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","removeChild","remove","World","world","geometry","vertices","i","push","randFloatSpread","setAttribute","particles","dispose","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dec42a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Idle.c11feb61.fbx\";","import body from \"../assets/character_textures/Custom_3.png\";\r\nimport hair from \"../assets/character_textures/T_F_MED_ASN_Starfish_Head_01_Hair_D.png\";\r\nimport head from \"../assets/character_textures/T_F_MED_ASN_Starfish_Head_01_Head_D.png\";\r\n\r\nconst textures = [\r\n    {\r\n        name: \"F_MED_Brite_Bomber_Summer_Body\",\r\n        texture: body,\r\n    },\r\n    {\r\n        name: \"F_MED_Commando_Hair_01\",\r\n        texture: hair,\r\n    },\r\n    {\r\n        name: \"F_MED_Commando_Head_01\",\r\n        texture: head,\r\n    }\r\n]\r\n\r\nexport default textures;","export default __webpack_public_path__ + \"static/media/Custom_3.7f9e410b.png\";","export default __webpack_public_path__ + \"static/media/T_F_MED_ASN_Starfish_Head_01_Hair_D.cedb652c.png\";","export default __webpack_public_path__ + \"static/media/T_F_MED_ASN_Starfish_Head_01_Head_D.6f1a0f25.png\";","import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\r\nimport model from \"../assets/Idle.fbx\";\r\nimport textures from \"./character.texture\";\r\n\r\nfunction IdleCharacter() {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    let character, mixer;\r\n    let width, height;\r\n    const current = ref.current;\r\n    const manager = new THREE.LoadingManager();\r\n    const clock = new THREE.Clock();\r\n\r\n    const scene = new THREE.Scene();\r\n    width = ref.current.clientWidth; // or window.innerWidth;\r\n    height = 600; // = window.innerHeight for full screen\r\n    const camera = new THREE.PerspectiveCamera(60, width / height, 1, 1000);\r\n\r\n    camera.position.set(0, 300, 200);\r\n\r\n    camera.rotation.set(150, 0, 0);\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.shadowMap.enabled = true;\r\n    // renderer.outputEncoding = THREE.sRGBEncoding;\r\n    // renderer.setClearColor(0xffffff, 0);\r\n    scene.background = new THREE.Color(0x999999);\r\n\r\n    // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\r\n    renderer.setSize(width, height);\r\n    // document.body.appendChild( renderer.domElement );\r\n    // use ref as a mount point of the Three.js scene instead of the document.body\r\n    ref.current.appendChild(renderer.domElement);\r\n\r\n    // add light\r\n\r\n    // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\r\n    scene.fog = new THREE.Fog(scene.background, 1, 2000);\r\n    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);\r\n    hemiLight.position.set(0, 2, 0);\r\n    hemiLight.position.multiplyScalar(100);\r\n    hemiLight.color.setHSL(0.6, 0.6, 0.6);\r\n    hemiLight.groundColor.setHSL(0.095, 1, 0.75);\r\n    scene.add(hemiLight);\r\n\r\n    // add to show light helper\r\n    // const hemiLightHelper = new THREE.HemisphereLightHelper(hemiLight, 10);\r\n    // scene.add(hemiLightHelper);\r\n\r\n    const dirLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    dirLight.color.setHSL(0.1, 1, 0.95);\r\n    dirLight.position.multiplyScalar(30);\r\n\r\n    const d = 200;\r\n    dirLight.position.set(1, 2, 1);\r\n    dirLight.position.multiplyScalar(100);\r\n\r\n    dirLight.castShadow = true;\r\n    dirLight.shadow.camera.top = d;\r\n    dirLight.shadow.camera.bottom = -d;\r\n    dirLight.shadow.camera.left = -d;\r\n    dirLight.shadow.camera.right = d;\r\n    // dirLight.shadow.camera.near = 0.1;\r\n    // dirLight.shadow.camera.far = 100;\r\n\r\n    dirLight.shadow.camera.far = 3500;\r\n    dirLight.shadow.bias = -0.0001;\r\n    scene.add(dirLight);\r\n\r\n    // add to show light helper\r\n    // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\r\n    // scene.add(dirLightHelper);\r\n\r\n    // const mesh = new THREE.Mesh(\r\n    //   new THREE.CircleGeometry(200, 48, 0),\r\n    //   new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })\r\n    // );\r\n    // mesh.rotation.x = -Math.PI / 2;\r\n    // mesh.receiveShadow = true;\r\n    // scene.add(mesh);\r\n\r\n    const groundGeo = new THREE.PlaneGeometry(10000, 10000);\r\n    const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n    groundMat.color.setHSL(0.095, 1, 0.75);\r\n\r\n    const ground = new THREE.Mesh(groundGeo, groundMat);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.receiveShadow = true;\r\n    scene.add(ground);\r\n\r\n    // load model\r\n    const loader = new FBXLoader(manager);\r\n    const textureLoader = new THREE.TextureLoader(manager);\r\n\r\n    loader.load(model, function (object) {\r\n      character = object;\r\n      mixer = new THREE.AnimationMixer(character);\r\n      const action = mixer.clipAction(character.animations[0]);\r\n      action.play();\r\n\r\n      character.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n\r\n          textures.forEach((item, index) => {\r\n            if (child.material[index].name === item.name) {\r\n              textureLoader.load(item.texture, (texture) => {\r\n                child.material[index].map = texture;\r\n                child.material[index].needsUpdate = true;\r\n                // render(); // only if there is no render loop\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      character.rotation.set(0, 45, 0);\r\n\r\n      scene.add(character);\r\n    });\r\n\r\n    manager.onLoad = () => {\r\n      animate();\r\n    };\r\n\r\n    // enable to add control\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.minDistance = 0.1;\r\n    controls.maxDistance = 3000;\r\n    controls.update();\r\n\r\n    // animate\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      const delta = clock.getDelta();\r\n      mixer.update(delta);\r\n      render();\r\n    };\r\n\r\n    const render = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      width = ref.current.clientWidth;\r\n      // height = 500;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      render();\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      // Callback to cleanup three js, cancel animationFrame, etc\r\n\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      current.removeChild(renderer.domElement);\r\n\r\n      scene.remove(character);\r\n      // world.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={ref} />;\r\n}\r\n\r\nexport default IdleCharacter;\r\n","export default __webpack_public_path__ + \"static/media/planet_animated.38f42313.fbx\";","import bushes_autumn_basecolor from \"../assets/world_textures/bushes_autumn_basecolor.jpg\";\r\nimport bushes_spring_basecolor from \"../assets/world_textures/bushes_spring_basecolor.jpg\";\r\nimport bushes_summer_basecolor from \"../assets/world_textures/bushes_summer_basecolor.jpg\";\r\nimport bushes_winter_basecolor from \"../assets/world_textures/bushes_winter_basecolor.jpg\";\r\nimport cones_autumn_basecolor from \"../assets/world_textures/cones_autumn_basecolor.jpg\";\r\nimport cones_spring_basecolor from \"../assets/world_textures/cones_spring_basecolor.jpg\";\r\nimport cones_winter_basecolor from \"../assets/world_textures/cones_winter_basecolor.jpg\";\r\nimport cubes_basecolor from \"../assets/world_textures/cubes_basecolor.jpg\";\r\nimport meteor_basecolor from \"../assets/world_textures/meteor_basecolor.jpg\";\r\nimport palms_basecolor from \"../assets/world_textures/palms_basecolor.jpg\";\r\nimport planet_basecolor from \"../assets/world_textures/planet_basecolor.jpg\";\r\nimport platonics_autumn_basecolor from \"../assets/world_textures/platonics_autumn_basecolor.jpg\";\r\nimport platonics_summer_basecolor from \"../assets/world_textures/platonics_summer_basecolor.jpg\";\r\nimport rocks_winter1_basecolor from \"../assets/world_textures/rocks_winter1_basecolor.jpg\";\r\nimport rocks_winter2_basecolor from \"../assets/world_textures/rocks_winter2_basecolor.jpg\";\r\nimport rocks_winter3_basecolor from \"../assets/world_textures/rocks_winter3_basecolor.jpg\";\r\nimport rocks1_basecolor from \"../assets/world_textures/rocks1_basecolor.jpg\";\r\nimport rocks2_basecolor from \"../assets/world_textures/rocks2_basecolor.jpg\";\r\nimport rocks3_basecolor from \"../assets/world_textures/rocks3_basecolor.jpg\";\r\nimport sticks_basecolor from \"../assets/world_textures/sticks_basecolor.jpg\";\r\nimport water_basecolor from \"../assets/world_textures/water_basecolor.jpg\";\r\n\r\nconst textures = [\r\n    {\r\n        name: \"Grass_Autumn_MAT\",\r\n        texture: bushes_autumn_basecolor,\r\n    },\r\n    {\r\n        name: \"Grass_Spring_MAT\",\r\n        texture: bushes_spring_basecolor,\r\n    },\r\n    {\r\n        name: \"Grass_Summer_MAT\",\r\n        texture: bushes_summer_basecolor,\r\n    },\r\n    {\r\n        name: \"Grass_Winter_MAT\",\r\n        texture: bushes_winter_basecolor,\r\n    },\r\n    {\r\n        name: \"Cones_Autumn_MAT\",\r\n        texture: cones_autumn_basecolor,\r\n    },\r\n    {\r\n        name: \"Cone_Spring_MAT\",\r\n        texture: cones_spring_basecolor,\r\n    },\r\n    {\r\n        name: \"Cones_Winter_MAT\",\r\n        texture: cones_winter_basecolor,\r\n    },\r\n    {\r\n        name: \"Cube_Spring_MAT\",\r\n        texture: cubes_basecolor,\r\n    },\r\n    {\r\n        name: \"Meteor_MAT\",\r\n        texture: meteor_basecolor,\r\n    },\r\n    {\r\n        name: \"Palm_ALL_MAT\",\r\n        texture: palms_basecolor,\r\n    },\r\n    {\r\n        name: \"Planet_MAT\",\r\n        texture: planet_basecolor,\r\n    },\r\n    {\r\n        name: \"Platonic_Autumn_MAT\",\r\n        texture: platonics_autumn_basecolor,\r\n    },\r\n    {\r\n        name: \"Platonic_Summer_MAT\",\r\n        texture: platonics_summer_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks1_Winter_MAT\",\r\n        texture: rocks_winter1_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks2_Winter_MAT\",\r\n        texture: rocks_winter2_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks3_Winter_MAT\",\r\n        texture: rocks_winter3_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks1_MAT\",\r\n        texture: rocks1_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks2_MAT\",\r\n        texture: rocks2_basecolor,\r\n    },\r\n    {\r\n        name: \"Rocks3_MAT\",\r\n        texture: rocks3_basecolor,\r\n    },\r\n    {\r\n        name: \"Stick_ALL_MAT\",\r\n        texture: sticks_basecolor,\r\n    },\r\n    {\r\n        name: \"Water_MAT\",\r\n        texture: water_basecolor,\r\n    },\r\n];\r\n\r\nexport default textures;","export default __webpack_public_path__ + \"static/media/bushes_autumn_basecolor.16f0e3c8.jpg\";","export default __webpack_public_path__ + \"static/media/bushes_spring_basecolor.2abbceee.jpg\";","export default __webpack_public_path__ + \"static/media/bushes_summer_basecolor.afe452f1.jpg\";","export default __webpack_public_path__ + \"static/media/bushes_winter_basecolor.b4d9a680.jpg\";","export default __webpack_public_path__ + \"static/media/cones_autumn_basecolor.09aee8e6.jpg\";","export default __webpack_public_path__ + \"static/media/cones_spring_basecolor.eff747f6.jpg\";","export default __webpack_public_path__ + \"static/media/cones_winter_basecolor.3152db34.jpg\";","export default __webpack_public_path__ + \"static/media/cubes_basecolor.b928bcaf.jpg\";","export default __webpack_public_path__ + \"static/media/meteor_basecolor.20a25705.jpg\";","export default __webpack_public_path__ + \"static/media/palms_basecolor.b0f7f181.jpg\";","export default __webpack_public_path__ + \"static/media/planet_basecolor.2dfa0473.jpg\";","export default __webpack_public_path__ + \"static/media/platonics_autumn_basecolor.69a417cb.jpg\";","export default __webpack_public_path__ + \"static/media/platonics_summer_basecolor.5698cb4a.jpg\";","export default __webpack_public_path__ + \"static/media/rocks_winter1_basecolor.8ff1e17b.jpg\";","export default __webpack_public_path__ + \"static/media/rocks_winter2_basecolor.485eab91.jpg\";","export default __webpack_public_path__ + \"static/media/rocks_winter3_basecolor.5244ea6f.jpg\";","export default __webpack_public_path__ + \"static/media/rocks1_basecolor.849cc66a.jpg\";","export default __webpack_public_path__ + \"static/media/rocks2_basecolor.cfbe79f6.jpg\";","export default __webpack_public_path__ + \"static/media/rocks3_basecolor.7cd09489.jpg\";","export default __webpack_public_path__ + \"static/media/sticks_basecolor.38d118c1.jpg\";","export default __webpack_public_path__ + \"static/media/water_basecolor.6ee021bc.jpg\";","import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\r\nimport model from \"../assets/planet_animated.fbx\";\r\nimport textures from \"./world.texture\";\r\n\r\nfunction World() {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    let world, mixer;\r\n    let width, height;\r\n    const current = ref.current;\r\n    const manager = new THREE.LoadingManager();\r\n    const clock = new THREE.Clock();\r\n\r\n    const scene = new THREE.Scene();\r\n    width = ref.current.clientWidth; // or window.innerWidth;\r\n    height = 600; // = window.innerHeight for full screen\r\n    const camera = new THREE.PerspectiveCamera(90, width / height, 1, 1500);\r\n\r\n    camera.position.set(1, 75, 75);\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(width, height);\r\n    // document.body.appendChild( renderer.domElement );\r\n    // use ref as a mount point of the Three.js scene instead of the document.body\r\n    ref.current.appendChild(renderer.domElement);\r\n\r\n    // add light\r\n\r\n    scene.fog = new THREE.Fog(0xa0a0a0, 1, 300);\r\n    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);\r\n    hemiLight.position.set(0, 20, 100);\r\n    scene.add(hemiLight);\r\n\r\n    const dirLight = new THREE.DirectionalLight(0xffffff);\r\n    dirLight.position.set(5, 10, 7.5);\r\n    dirLight.castShadow = true;\r\n    dirLight.shadow.camera.right = 10;\r\n    dirLight.shadow.camera.left = -10;\r\n    dirLight.shadow.camera.top = 10;\r\n    dirLight.shadow.camera.bottom = -10;\r\n    scene.add(dirLight);\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    const vertices = [];\r\n\r\n    for (let i = 0; i < 10000; i++) {\r\n      vertices.push(THREE.MathUtils.randFloatSpread(2000)); // x\r\n      vertices.push(THREE.MathUtils.randFloatSpread(2000)); // y\r\n      vertices.push(THREE.MathUtils.randFloatSpread(2000)); // z\r\n    }\r\n\r\n    geometry.setAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n\r\n    const particles = new THREE.Points(\r\n      geometry,\r\n      new THREE.PointsMaterial({ color: 0x888888 })\r\n    );\r\n    scene.add(particles);\r\n\r\n    // load model\r\n    const loader = new FBXLoader(manager);\r\n    const textureLoader = new THREE.TextureLoader(manager);\r\n\r\n    loader.load(model, function (object) {\r\n      world = object;\r\n      mixer = new THREE.AnimationMixer(world);\r\n\r\n      const action = mixer.clipAction(world.animations[0]);\r\n      action.play();\r\n\r\n      world.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n\r\n          textures.forEach((item) => {\r\n            if (child.material.name === item.name) {\r\n              textureLoader.load(item.texture, (texture) => {\r\n                child.material.map = texture;\r\n                child.material.needsUpdate = true;\r\n                // render(); // only if there is no render loop\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      scene.add(world);\r\n    });\r\n\r\n    manager.onLoad = () => {\r\n      animate();\r\n    };\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.minDistance = 0.1;\r\n    controls.maxDistance = 300;\r\n    controls.update();\r\n\r\n    // animate\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      const delta = clock.getDelta();\r\n      mixer.update(delta);\r\n      render();\r\n    };\r\n\r\n    const render = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      width = ref.current.clientWidth;\r\n      // height = 500;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      render();\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      // Callback to cleanup three js, cancel animationFrame, etc\r\n\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      current.removeChild(renderer.domElement);\r\n\r\n      scene.remove(world);\r\n      scene.remove(particles);\r\n      scene.remove(hemiLight);\r\n      scene.remove(dirLight);\r\n      geometry.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={ref} />;\r\n\r\n  // return (\r\n  //   <div className=\"App\">\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default World;\r\n","import './App.css';\nimport IdleCharacter from './components/IdleCharacter';\nimport World from \"./components/World\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IdleCharacter />\n      <World />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}